apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion SDK_VERSION
    buildToolsVersion BUILD_TOOL_VERSION

    defaultConfig {
        applicationId 'com.bytesforge.linkasanote'
        minSdkVersion MIN_SDK_VERSION
        targetSdkVersion SDK_VERSION
        versionCode buildVersionCode()
        versionName VERSION_NAME

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'

        vectorDrawables.useSupportLibrary = true
        resourceConfigurations += ['en', 'ru-rRU']
        buildConfigField 'long', 'BUILD_TIMESTAMP', System.currentTimeMillis() + 'L'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    //compileOptions {
    //    incremental = false
    //}

    /**
     * To sign release build, create the file release-signing.properties with the follow content:
     *
     * signingStoreLocation=/path/to/key.store
     * signingStorePassword=xxx
     * signingKeyAlias=alias
     * signingKeyPassword=xxx
     */
    File releaseSigning = project.rootProject.file('release-signing.properties')
    if (releaseSigning.exists()) {
        Properties signingProperties = new Properties()
        releaseSigning.withInputStream { signingProperties.load(it) }

        // NOTE: signingProperties.hasProperty is not working
        println 'Found release-signing.properties, will try to sign the build...'
        signingConfigs {
            release {
                storeFile file(signingProperties.getProperty('signingStoreLocation'))
                storePassword signingProperties.getProperty('signingStorePassword')
                keyAlias signingProperties.getProperty('signingKeyAlias')
                keyPassword signingProperties.getProperty('signingKeyPassword')
            }
        }
        buildTypes.release.signingConfig = signingConfigs.release
    } else {
        buildTypes.release.signingConfig = null
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            multiDexEnabled true
        }
        release {
            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "laano_v${variant.versionName}-${variant.name}.apk"
                }
            }
            debuggable false
            minifyEnabled true
            shrinkResources true
            multiDexEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }


    flavorDimensions 'mode'
    productFlavors {
        mock {
            applicationIdSuffix = '.mock'
        }
        prod
    }
    packagingOptions {
        resources {
            excludes += [
                    'META-INF/CHANGES',
                    'META-INF/DEPENDENCIES',
                    'META-INF/LICENSE',
                    'META-INF/README',
                    'META-INF/README.txt',
                    'META-INF/README.md',
                    'META-INF/rxjava.properties',
                    'META-INF/*.*.version'
            ]
            pickFirsts += [
                    'androidsupportmultidexversion.txt'
            ]
        }
    }


    android.variantFilter { variant ->
        if (variant.buildType.name == 'release'
                && variant.getFlavors().get(0).name == 'mock') {
            variant.setIgnore(true)
        }
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            showStandardStreams = true
        }
    }

    dataBinding {
        enabled = true
    }

    lint {
        abortOnError false
        htmlOutput file("$project.buildDir/reports/lint/lint.html")
        htmlReport true
    }
    namespace 'com.bytesforge.linkasanote'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':androidutils')
    implementation 'com.github.alexcustos:TokenAutoComplete:2.1.4'

    implementation "androidx.multidex:multidex:${multidexVersion}"

    implementation "com.google.guava:guava:${guavaVersion}-android"
    implementation "com.github.nextcloud:android-library:${nextcloudLibraryVersion}"
    implementation "org.jsoup:jsoup:${jsoupVersion}"

    // Kotlin
    implementation "androidx.core:core-ktx:$core_ktx_version"
    implementation "androidx.preference:preference-ktx:${androidxPrefVersion}"
    //implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel:${androidxLifecycleVersion}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${androidxLifecycleVersion}"

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:${rxjavaVersion}"
    implementation "io.reactivex.rxjava2:rxandroid:${rxandroidVersion}"

    // AndroidX
    implementation "androidx.drawerlayout:drawerlayout:${androidxDrawerVersion}"
    //implementation "androidx.appcompat:appcompat:${appcompatVersion}"
    implementation "com.google.android.material:material:${materialVersion}"

    // Dagger 2
    annotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"
    implementation "com.google.dagger:dagger:${daggerVersion}"
    kapt "com.google.dagger:dagger-compiler:${daggerVersion}"
    compileOnly "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}"

    // Stetho
    implementation "com.facebook.stetho:stetho:${stethoVersion}"

    // Local unit tests
    testImplementation project(":sharedTestCode")
    testImplementation "androidx.test:core:${testCoreVersion}"
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-inline:${mockitoVersion}"

    // Espresso Testing
    androidTestImplementation project(":sharedTestCode")
    androidTestImplementation "androidx.test.espresso:espresso-core:${espressoVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:${espressoVersion}"
    androidTestImplementation "androidx.test:runner:${testRunnerVersion}"
    androidTestImplementation "androidx.test:rules:${testRulesVersion}"
    androidTestImplementation "androidx.test.ext:junit:${testExtVersion}"
    androidTestImplementation "org.mockito:mockito-core:${mockitoVersion}"
    //androidTestImplementation "org.mockito:mockito-android:${mockitoVersion}"
    //androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    androidTestImplementation "com.linkedin.dexmaker:dexmaker-mockito-inline:${dexmakerVersion}"

    // Resolve conflicts
    //implementation "com.google.code.findbugs:jsr305:${findbugsJsr305Version}"
}