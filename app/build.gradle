plugins {
    id('com.android.application') version '8.12.0'
    id('org.jetbrains.kotlin.android') version '2.0.21'
    id('org.jetbrains.kotlin.kapt')
    id('com.google.dagger.hilt.android')
}

android {
    compileSdk = rootProject.ext.SDK_VERSION
    buildToolsVersion rootProject.ext.BUILD_TOOL_VERSION

    defaultConfig {
        applicationId 'com.bytesforge.linkasanote'

        minSdkVersion MIN_SDK_VERSION
        targetSdkVersion SDK_VERSION

        versionCode buildVersionCode()
        versionName VERSION_NAME

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'

        vectorDrawables.useSupportLibrary = true
        resourceConfigurations += ['en', 'ru-rRU']
        buildConfigField 'long', 'BUILD_TIMESTAMP', System.currentTimeMillis() + 'L'
        // TODO: remove this after migration to Hilt
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                    "dagger.hilt.disableModulesHaveInstallInCheck" : "true"
                ]
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        // incremental = false
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    /**
     * To sign release build, create the file release-signing.properties with the follow content:
     *
     * signingStoreLocation=/path/to/key.store
     * signingStorePassword=xxx
     * signingKeyAlias=alias
     * signingKeyPassword=xxx
     */
    File releaseSigning = project.rootProject.file('release-signing.properties')
    if (releaseSigning.exists()) {
        Properties signingProperties = new Properties()
        releaseSigning.withInputStream { signingProperties.load(it) }

        // NOTE: signingProperties.hasProperty is not working
        println 'Found release-signing.properties, will try to sign the build...'
        signingConfigs {
            release {
                storeFile file(signingProperties.getProperty('signingStoreLocation'))
                storePassword signingProperties.getProperty('signingStorePassword')
                keyAlias signingProperties.getProperty('signingKeyAlias')
                keyPassword signingProperties.getProperty('signingKeyPassword')
            }
        }
        buildTypes.release.signingConfig = signingConfigs.release
    } else {
        buildTypes.release.signingConfig = null
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            multiDexEnabled true
        }
        release {
            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "laano_v${variant.versionName}-${variant.name}.apk"
                }
            }
            debuggable false
            minifyEnabled true
            shrinkResources true
            multiDexEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        dataBinding true
        viewBinding true
        buildConfig true
    }


    flavorDimensions 'mode'
    productFlavors {
        mock {
            applicationIdSuffix = '.mock'
        }
        prod
    }
    packagingOptions {
        resources {
            excludes += [
                    'META-INF/CHANGES',
                    'META-INF/DEPENDENCIES',
                    'META-INF/LICENSE',
                    'META-INF/README',
                    'META-INF/README.txt',
                    'META-INF/README.md',
                    'META-INF/rxjava.properties',
                    'META-INF/*.*.version'
            ]
            pickFirsts += [
                    'androidsupportmultidexversion.txt'
            ]
        }
    }

    android.variantFilter { variant ->
        if (variant.buildType.name == 'release'
                && variant.getFlavors().get(0).name == 'mock') {
            variant.setIgnore(true)
        }
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            showStandardStreams = true
        }
    }

    dataBinding {
        enabled = true
    }

    lint {
        abortOnError false
        htmlOutput file("$project.layout.buildDirectory/reports/lint/lint.html")
        htmlReport true
    }
    namespace 'com.bytesforge.linkasanote'
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':androidutils')
    implementation 'com.github.alexcustos:TokenAutoComplete:2.1.4'

    implementation 'androidx.multidex:multidex:2.0.1'

    implementation 'com.google.guava:guava:33.4.8-android'
    implementation 'com.github.nextcloud:android-library:1.5.0'
    implementation 'org.jsoup:jsoup:1.21.1'

    // Kotlin
    implementation "androidx.core:core-ktx:$core_ktx_version"
    implementation 'androidx.preference:preference-ktx:1.2.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.9.2'

    // RxJava
    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    // AndroidX
    //implementation 'androidx.lifecycle:lifecycle-viewmodel:2.8.7'
    implementation 'androidx.drawerlayout:drawerlayout:1.2.0'
    implementation 'com.google.android.material:material:1.12.0'

    // Dagger 2
    annotationProcessor 'com.google.dagger:dagger-compiler:2.51.1'
    implementation 'com.google.dagger:dagger:2.51.1'
    kapt 'com.google.dagger:dagger-compiler:2.51.1'
    compileOnly 'javax.annotation:javax.annotation-api:1.3.2'
    implementation('com.google.dagger:hilt-android:2.51.1')
    kapt('com.google.dagger:hilt-android-compiler:2.51.1')

    // Stetho
    implementation 'com.facebook.stetho:stetho:1.6.0'

    // Local unit tests
    testImplementation project(':sharedTestCode')
    testImplementation 'androidx.test:core:1.7.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'

    // Espresso Testing
    androidTestImplementation project(':sharedTestCode')
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.7.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.7.0'
    androidTestImplementation 'androidx.test:runner:1.7.0'
    androidTestImplementation 'androidx.test:rules:1.7.0'
    androidTestImplementation 'androidx.test.ext:junit:1.3.0'
    androidTestImplementation 'org.mockito:mockito-core:5.18.0'
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito-inline:2.28.6'

    // Resolve conflicts
    //implementation 'com.google.code.findbugs:jsr305:3.0.2'
}

kapt {
    correctErrorTypes = true
}